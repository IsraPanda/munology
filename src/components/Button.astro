---
export interface Props {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
  href?: string;
  class?: string;
  ariaLabel?: string;
  ariaDescribedBy?: string;
}

const { 
  variant = 'primary', 
  size = 'medium', 
  disabled = false, 
  type = 'button',
  href,
  class: className = '',
  ariaLabel,
  ariaDescribedBy
} = Astro.props;

const baseClasses = "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed";

const variantClasses = {
  primary: "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500 shadow-lg hover:shadow-xl",
  secondary: "bg-transparent border-2 border-gray-600 text-gray-300 hover:border-gray-400 hover:text-white focus:ring-gray-500",
  danger: "bg-red-600 hover:bg-red-700 text-white focus:ring-red-500"
};

const sizeClasses = {
  small: "px-3 py-1.5 text-sm",
  medium: "px-4 py-2 text-base",
  large: "px-6 py-3 text-lg"
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;
---

{href ? (
  <a 
    href={href} 
    class={classes}
    role="button"
    tabindex={disabled ? -1 : 0}
    aria-label={ariaLabel}
    aria-describedby={ariaDescribedBy}
    aria-disabled={disabled ? 'true' : undefined}
  >
    <slot />
  </a>
) : (
  <button 
    type={type} 
    disabled={disabled} 
    class={classes}
    aria-label={ariaLabel}
    aria-describedby={ariaDescribedBy}
  >
    <slot />
  </button>
)} 